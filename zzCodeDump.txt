function adjustCellWidthTargetOnly(targetCell) {
            // console.log("adjustCellWidthTargetOnly");
            // gridTable = document.getElementById("gridTable")
            // var yValue = 0;                                          // first cell of y-axis
            // var xValue = parseInt(inputCell.getAttribute("axis-x")); // Get x-axis value of the changed cell
            // var maxWidth = parseInt(gridTable.rows[0].cells[xValue-1].getAttribute("max-width")); // Get stored maximum width

            // Get the current input width
            // var inputWidth = inputCell.clientWidth;
            // inputCell.style.width = (inputCell.scrollWidth) + 'px';
            // console.log( inputCell.scrollWidth, inputCell.clientWidth, inputCell.style.width)  


            // Calculate the total content width of all cells in the last row
            var totalWidth = 0;
            var lastRow = gridTable.rows[numCols - 1];
            for (var x = 0; x < numRows; x++) {
                var inputCell = lastRow.cells[x];
                totalWidth += inputCell.childNodes[0].offsetWidth + targetCell.offsetWidth - lastRow.cells[x].offsetWidth;
                console.log(inputCell.childNodes[0].offsetWidth, totalWidth, lastRow.offsetWidth, gridTable.offsetWidth, targetCell.offsetWidth - lastRow.cells[x].offsetWidth)
            }

            // Set the table width to accommodate the total content width
            // gridTable.style.width = totalWidth + "px";


            // Only update maxWidth if the current input width is greater                  |
            // if (inputWidth > maxWidth) {                                                |
            //                                                                             |    // no need for this, once one cell will grow other will automaticaly
            //     // Update maxWidth                                                      |
            //     maxWidth = inputWidth;                                                  |

            //     // Set the stored maximum width attribute to the first cell             |
            //     gridTable.rows[0].cells[xValue-1].setAttribute("max-width", maxWidth);  |

            //     // Set the same maximum width for all cells in the column               |
            //     for (var x = 1; x <= numRows; x++) {                                    |
            //         gridTable.rows[yValue - 1].cells[x - 1].style.width = maxWidth + "px";
            //     }
            // }
        }


        // input.addEventListener("kuchbitoh", function (event) {
            //     var input = event.target;

            //     // to filter out blank inputs
            //     var newValue = input.value;
            //     if (newValue.trim() === "") {
            //         console.log("blank input");
            //         return;
            //     }
            //     console.log(input)

            //     var xValue = input.getAttribute("axis-x");
            //     var yValue = input.getAttribute("axis-y");
            //     input.style.width = (input.scrollWidth) + 'px';

            //     // adjustCellWidthTargetOnly(input); // Adjust cell widths within the same column (y-axis) as the changed cell

            //     //  post req  using fetch to save data

            //     fetch('/table', {
            //         method: 'Post',
            //         headers: {
            //             'Content-Type': 'application/json'
            //         },
            //         body: JSON.stringify({ xValue, yValue, input: input.value, doc_id: window.doc_id })
            //     })
            //         .then(response => response.json())
            //         .then(result => {
            //             console.log(result);
            //             // const minimizeButton = document.getElementById('minimizeButton');
            //             // minimizeButton.click();
            //             // location.reload();

            //         })
            //         .catch(error => console.error(error));




            //     console.log("Changed input at: " + xValue + "," + yValue + " New value: " + input.value);
            // });




            // adder used later 

            // Function to add a new x-axis to all y-axes
        function addXAxis() {
            numRows++; // Increase the number of rows (x-axis)
            for (var y = 1; y <= numCols; y++) {
                var cell = createInputCell(numRows, y);
                var row = gridTable.rows[y - 1];
                row.appendChild(cell);
            }
        }

        // Function to add a new y-axis to all x-axes
        function addYAxis() {
            numCols++; // Increase the number of columns (y-axis)
            var row = document.createElement("tr");
            for (var x = 1; x <= numRows; x++) {
                var cell = createInputCell(x, numCols);
                row.appendChild(cell);
            }
            gridTable.appendChild(row);
        }



            function fitCol(Table) {



        var max = 0;
        for (var i = 0; i < 100; i++) {
            if (Table[i][0] == null) {
                if (max < 5) {
                    return 5;
                }
                else {
                    return max;
                }
            }
            else {
                max++;
            }
        }

    }




    // to set diaahdi

     // console.log(req.body)
    const { value, doc_id } = req.body; // yValue is the index of the row
    Table.findById(doc_id, function (err, doc) {
        
        console.log(doc.name[0]);
        
        if (err) {
            console.log(err);
        }
        console.log("no error")
        
        if (typeof(doc.name[0][3])=== 'number') {
            res.end("already set");
            console.log("already set")
            
        }
        
        else{
            console.log("type of "+typeof(doc.name[0][3]));
            
            
            
            doc.name[0][3] = parseInt(value);
            console.log(doc.name[0]);
            console.log(typeof(doc.name[0][3]));
            
            
            
            doc.save(function (err, updatedDoc) {
                if (err) {
                    console.log(err)
                    res.end()
                } else {
                    // console.log(updatedDoc);
                    console.log("updated succesfully")
                    
                }
            });
        }
        });


        // using findvyidandupdate    to set dihaadi
         const { value, doc_id } = req.body;

    // Convert the value to a number
    const parsedValue = parseInt(value);

    // Define the update operation with a conditional update
    const updateOperation = {
        $set: {
            'name.0.3': {
                $cond: {
                    if: { $eq: [{ $type: '$name.0.3' }, 'number'] }, // Check if it's already a number
                    then: '$name.0.3', // Keep the current value
                    else: parsedValue, // Update with the parsed value
                },
            },
        },
    };

    Table.findByIdAndUpdate(
        doc_id, // Specify the document to update by _id
        updateOperation,
        { new: true }, // This option returns the modified document
        (err, updatedDoc) => {
            if (err) {
                console.log(err);
                return res.status(500).json({ error: "Database error" });
            }

            if (!updatedDoc) {
                return res.status(404).json({ error: "Document not found" });
            }

            console.log("Document updated successfully");
            console.log(updatedDoc);

            return res.json(updatedDoc);
        }
    );


    table.aggregate() was what


// from acces.ejs
   <% var uSers = []; %>
    <div id="addMainToUser">
        <% data.forEach(function(user) { %>
            <% if (user.userLevel !== "admin") { %>
                <% uSers.push({ id: user._id, main: user.main }); %>
                <div id="userbox">
                    <h1><%= user._id %></h1>
                    <h3><%= user.name %></h3>
                    <p><%= user.mobileNo %></p>
                    <p><%= user.psd %></p>
                    <p><%= user.userLevel %></p>
                    <div class="permissionbox" id="<%= user._id %>" onclick="arrangeMain(this)">Arrange</div>
                    <button onclick="updateMain('<%= user._id %>')">Click</button>
                </div>
            <% } %>
        <% }); %>
        <% console.log(uSers); %>
    </div>
   // from js of it
    // @ts-ignore
    // ignor error checking for next linelin
    var uSers = <%- JSON.stringify(uSers) %>;

    // no async await ejs of access

    <!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<style>
    #userbox {
        border: 1px rgb(235, 231, 231) solid;
        margin: 10px 0px;
    }

    #addMainToUser {

        margin-top: 30px;
    }
    button{
        display: none;
    }
</style>

<body>
 
  
    <hr>
    <br>
    <hr>

    <div id="addMainToUser"></div>

</body>
<script>
    var uSers = [];

   
    
 

    document.getElementById('addMainToUser');

    fetch('/user/accounts', {
        method: 'GET',
        headers: {
            'Content-Type': 'application/json'
        }
    })
        .then(res => res.json())
        .then(data => {

            console.log(data);

            let html = '';

            data.forEach((user) => {
                console.log("user tak")
                if (user.userLevel != "admin") {
                    console.log(uSers)
                    uSers.push({ id: user._id, main: user.main });





                    html += `
                    <div id="userbox" >
                        <h1>${user._id}</h1>
                        <h3>${user.name}</h3>
                        <p>${user.mobileNo}</p>
                        <p>${user.psd}</p>
                        <p>${user.userLevel}</p>
                        <div class="permissionbox" id="${user._id}" onclick="arrangeMain(this)">Arrange</div>
                        <button onclick="updateMain('${user._id}')">Vlick</button>
                        
    
                    </div>
                `;
                    // user.main
                }


            });

            document.getElementById('addMainToUser').innerHTML = html;

        })

    console.log("second start")

    fetch('/main/data', {
        method: 'GET',
        headers: {
            'Content-Type': 'application/json'
        },
    })
        .then(res => res.json())
        .then(data => {
            window.mainData = data;

            console.log(data);

            let mainer = '';
            maincounter = 0;
            data.forEach((main) => {
                console.log(main[0])

                mainer += `
               
                 <input type="checkbox" onclick="addMain(this)" id="c${maincounter}" >${main[0]}<br>
            `;
                maincounter++;
            });
            window.mainer = mainer;

            // document.getElementById('addMainToUser').innerHTML = html;
            //    console.log("what ")
            //     document.querySelectorAll(".permissionbox").forEach((box) => {
            //         box.innerHTML = mainer;
            //         console.log(box)
            //     })

        })
        .catch(err => console.log(err));



    function arrangeMain(e) {
        if(e.innerHTML !="Arrange"){
            return;

        }
        e.parentElement.querySelector("button").style.display = "block";


        console.log(e.id);
        var user = uSers.find(user => user.id === e.id);

        e.innerHTML = window.mainer;

        maincount = 0;

        user.main.forEach((mai) => {
            if (mai) {          // if false doesnt run and if data run
                console.log(mai)

                e.querySelector(`#c${maincount}`).checked = true;
            }



            maincount++;
        })




    };



    function addMain(e) {
        console.log(e.parentElement.id, e.id, e.checked ? 1 : 0);
        idPosition = e.id.slice(1);
        console.log(parseInt(idPosition))

        var user = uSers.find(user => user.id === e.parentElement.id);


        // Check if the user.main array is long enough to accommodate the given position
        if (user.main.length <= idPosition) {
            // If not, expand the array with null values up to the desired position
            while (user.main.length <= idPosition) {
                user.main.push(null);
            }
        }
        // Update the value in the array based on the checkbox's checked status
        fdata = e.checked ? window.mainData[idPosition]: false;
        user.main[idPosition] = fdata;

        // Now the user.main array has been updated
        console.log(user.main, fdata);





        // console.log(e.checked)

        // store the pre value and clciked value to array and then after submit send it to server to create a own main for each user 

    }


    function updateMain(userId) {

        var user = uSers.find(user => user.id === userId);
        console.log(user)
        // const filteredArray = user.main.filter(value => value !== false);
        // user.main = filteredArray;
        // console.lgo(user)

       

        fetch('/user/_main', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({user})
        })
            .then(res => res.json())
            .then(data => {
                console.log(data);
            })
            .catch(err => console.log(err));

        
    }


</script>


</html> 





// to writing effect

<!DOCTYPE html>
<html>
<head>
<title>Page Title</title>
</head>
<body>

<h1 id="hihi">This is a Heading</h1>
<p>This is a paragraph.</p>

</body>
<script>

var result = "";

var hihi = document.getElementById("hihi");

var alphabet = [
  ' ','a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',
  'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'
];
var zar = 0;
var found = false
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

async function zara(jira) {
  var text = jira.split('');

  async function iteratejira() {
    if (zar < text.length) {
      var zh = text[zar];
      console.log(zh);
      await iterateAlphabet(0, zh); // Start iterating through the alphabet with index 0
    //   zar++;
    } else {
      console.log("Even the first function is complete");
    }
  }

  async function iterateAlphabet(index, zh) {
    if (index < alphabet.length) {
      var character = alphabet[index];
      console.log(zh, character);
      
      if(found) {
          
          found = false
          zar++
          index = 0
          iteratejira()
          return;
          
      }
      hihi.innerHTML = result+character
      
      if(zh===character){
          found = true
          result +=zh
          
      }
      await sleep(100); // Introduce a 1000ms (1 second) delay before the next iteration
      await iterateAlphabet(index + 1, zh); // Continue with the next character
    } else {
        found = false
          zar++
          index = 0           // can be use input is not in alpabhet
          result +=zh
          iteratejira()
          return;
      //await sleep(100); // Introduce a 1000ms (1 second) delay before moving to the next character in 'text'
      //await iteratejira(); // Move to the next character in 'text'
    }
  }

  // Call the initial invocation of iteratejira
  await iteratejira();
}

// Call the function to start iterating through the alphabet
zara("tarun yadav");





</script>
</html>


// showpiss.html
<!DOCTYPE html>
<html>

<head>
  <title>Page Title</title>
</head>

<style>
  p {
    display: inline-block;
    width: 1em;
    /* Set a fixed width for each character block */
    white-space: nowrap;
    /* Prevent text from wrapping */
    text-align: center;
    /* Center-align the content within each block */
    /* border: 1px solid #ccc; Add a border for better visibility (optional) */
    margin-right: 2px;
    color: white;
  }

  body {
    background-color: grey;
  }
</style>

<body>

  <h1 id="hihi"></h1>
  <!-- <p>This is a paragraph.</p> -->

  <audio id="popSound" src="click-button-140881.mp3"></audio>

  <button id="btn">staart</button>

</body>
<script>

  // Function to play the pop sound
  function playPopSound() {
    var popSound = document.getElementById("popSound");
    popSound.currentTime = 0; // Reset the audio to the beginning
    popSound.play();
  }

  var text =
    "абвгдеёжзийклмнопрстуфхцчшщъыьэюя" +  // Russian
    "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝÞß" +  // Some accented Latin characters
    "αβγδεζηθικλμνξοπρστυφχψω" +  // Greek
    "你好吗我很好谢谢" +  // Chinese (Simplified)
    "こんにちはありがとうさようなら" +  // Japanese
    "안녕하세요감사합니다안녕히가세요" +  // Korean
    "مرحباأهلاصباحالخير" +  // Arabic
    "ABCDEFGHIJKLMNOPQRSTUVWXYZ" +  // Additional Latin characters
    "नमस्तेआपकैसेहैंबड़ीख़बर" +  // Hindi
    "مرحباكيفحالكشكرا" +  // Arabic (Egyptian dialect)
    "¡Hola¿Cómoestás?Estoybien,gracias" +  // Spanish
    "OláComovocêestá?Estoubem,obrigado" +  // Portuguese
    " abcdefghijklmnopqrstuvwxyz" +  // English
    "SalutCommentçava?Jevasbien,merci";  // French

  // console.log(alphabetString);

  // var result = "";

  var hihi = document.getElementById("hihi");

  // var alphabet = [
  //   ' ', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',
  //   'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'
  // ];
  // var text = ' abcdefghijklmnopqrstuvwxyz';
  var alphabet = text.split("")
  
  function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
  
  async function zara(jira) {
    var text = jira.split('');
    
    stringArray = [];
    var zar = 0;

    m = 0;
    // async function iteratejira() {
    //   if (zar < text.length) {
    //     var p = document.createElement("p");
    //     hihi.append(p);
    //     var zh = text[zar];
    //     console.log(zh);

    //     await iterateAlphabet(0, zh, p); // Start iterating through the alphabet with index 0
    //       zar++;
    //   } else {
    //     console.log("Even the first function is complete");
    //   }
    // };
    async function iteratejira() {
      if (zar < text.length) {
        textCh = text[zar];
        var newAlpha = alphabet.slice(); // Create a copy of the alphabet array

        for (var i = newAlpha.length - 1; i > 0; i--) {
          var j = Math.floor(Math.random() * (i + 1));
          [newAlpha[i], newAlpha[j]] = [newAlpha[j], newAlpha[i]];
        }
        stringArray.push(newAlpha);
        p = document.createElement("p");
        hihi.append(p);
        p.setAttribute("found", false)
        p.setAttribute("index", 0);
        p.setAttribute("m", m);

        iterateAlphabet(textCh, p)
        await sleep(333)	

        m++;
        zar++;
        iteratejira();

      } else {
        console.log("Even the first function is complete");
      }
    };

    // text.forEach((text) => {
    //   var newAlpha = alphabet.slice(); // Create a copy of the alphabet array

    //   for (var i = newAlpha.length - 1; i > 0; i--) {
    //     var j = Math.floor(Math.random() * (i + 1));
    //     [newAlpha[i], newAlpha[j]] = [newAlpha[j], newAlpha[i]];
    //   }
    //   stringArray.push(newAlpha);
    //   p = document.createElement("p");
    //   hihi.append(p);
    //   p.setAttribute("found", false)
    //   p.setAttribute("index", 0);
    //   p.setAttribute("m", m);

    //   iterateAlphabet(text, p)

    //   m++;
    // });

    // second repiattion
    async function iterateAlphabet(zh, p) {

      m = parseInt(p.getAttribute("m"));
      index = parseInt(p.getAttribute("index"));
      found = p.getAttribute("found");
      // console.log(stringArray)
      newAlpha = stringArray[m]

      if (index < newAlpha.length) {
        var character = newAlpha[index];

        p.setAttribute("index", index + 1);

        // console.log(zh, character, p, index, newAlpha.length, found)

        if (found === "true") {

          // found = false
          // zar++
          // index = 0
          // iteratejira()
          console.log(p, "found")
          return;

        }
        playPopSound()
        p.innerHTML = character;

        if (zh === character) {
          p.setAttribute("found", true);
          // result += zh

        }
        await sleep(100)			//Introduce a 1000ms (1 second) delay before the next iteration
        await iterateAlphabet(zh, p); // Continue with the next character
      } else {
        // found = false
        // zar++
        // index = 0           // can be use input is not in alpabhet
        // result += zh
        // iteratejira()
        p.innerHTML = zh
        console.log(p, "end")
        // iterateAlphabet(zh, p) 
        //await sleep(100); // Introduce a 1000ms (1 second) delay before moving to the next character in 'text'
        //await iteratejira(); // Move to the next character in 'text'
      }
    }

    // Call the initial invocation of iteratejira
    await iteratejira();
  }

  // Call the function to start iterating through the alphabet
  // zara("Kuch bhi");
  document.getElementById("btn").addEventListener("click", function () {
    // Play the audio when the button is clicked
    zara("kuch bhi")
  });





</script>

</html>



// same in another from<!DOCTYPE html>
<html>

<head>
  <title>Page Title</title>
</head>

<style>
  p {
    display: inline-block;
    width: 1em;
    /* Set a fixed width for each character block */
    white-space: nowrap;
    /* Prevent text from wrapping */
    text-align: center;
    /* Center-align the content within each block */
    /* border: 1px solid #ccc; Add a border for better visibility (optional) */
    margin-right: 2px;
    color: white;
  }

  body {
    background-color: rgb(0, 0, 0);
  }

  input {
    display: none;
  }
</style>

<body>

  <h1 id="hihi"></h1>
  <!-- <p>This is a paragraph.</p> -->

  <!-- <audio id="popSound" src="click-button-140881.mp3"></audio> -->

  <button id="btn">staart</button>

</body>
<script>

  // Function to play the pop sound
  // function playPopSound() {
  //   const popSound = document.getElementById("popSound");
  //   popSound.currentTime = 0; // Reset the audio to the beginning
  //   popSound.play();
  // }

  var text =
    "абвгдеёжзийклмнопрстуфхцчшщъыьэюя" +  // Russian
    "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝÞß" +  // Some accented Latin characters
    "αβγδεζηθικλμνξοπρστυφχψω" +  // Greek
    "你好吗我很好谢谢" +  // Chinese (Simplified)
    "こんにちはありがとうさようなら" +  // Japanese
    "안녕하세요감사합니다안녕히가세요" +  // Korean
    "مرحباأهلاصباحالخير" +  // Arabic
    "ABCDEFGHIJKLMNOPQRSTUVWXYZ" +  // Additional Latin characters
    "नमस्तेआपकैसेहैंबड़ीख़बर" +  // Hindi
    "مرحباكيفحالكشكرا" +  // Arabic (Egyptian dialect)
    "¡Hola¿Cómoestás?Estoybien,gracias" +  // Spanish
    "OláComovocêestá?Estoubem,obrigado" +  // Portuguese
    " abcdefghijklmnopqrstuvwxyz" +  // English
    "SalutCommentçava?Jevasbien,merci";  // French

  // console.log(alphabetString);

  // var result = "";

  var hihi = document.getElementById("hihi");

  // var alphabet = [
  //   ' ', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o',
  //   'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'
  // ];
  // var text = ' abcdefghijklmnopqrstuvwxyz';
  var alphabet = text.split("")

  function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  async function zara(jira) {
    var text = jira.split('');

    stringArray = [];
    var zar = 0;

    m = 0;
    // async function iteratejira() {
    //   if (zar < text.length) {
    //     var p = document.createElement("p");
    //     hihi.append(p);
    //     var zh = text[zar];
    //     console.log(zh);

    //     await iterateAlphabet(0, zh, p); // Start iterating through the alphabet with index 0
    //       zar++;
    //   } else {
    //     console.log("Even the first function is complete");
    //   }
    // };
    async function iteratejira() {
      if (zar < text.length) {
        textCh = text[zar];
        var newAlpha = alphabet.slice(); // Create a copy of the alphabet array

        for (var i = newAlpha.length - 1; i > 0; i--) {
          var j = Math.floor(Math.random() * (i + 1));
          [newAlpha[i], newAlpha[j]] = [newAlpha[j], newAlpha[i]];
        }
        stringArray.push(newAlpha);
        p = document.createElement("p");
        hihi.append(p);
        p.setAttribute("found", false)
        p.setAttribute("index", 0);
        p.setAttribute("m", m);

        sound = document.createElement("audio");
        // sound.setAttribute("src", "pop-39222.mp3")
        sound.setAttribute("src", "click-button-140881.mp3")
        sound.addEventListener("timeupdate", function () {
          if (sound.currentTime >= 0.09) {
            sound.pause();
          }
        });


        iterateAlphabet(textCh, p, sound)
        await sleep(700)

        m++;
        zar++;
        iteratejira();

      } else {
        console.log("Even the first function is complete");
      }
    };

    // text.forEach((text) => {
    //   var newAlpha = alphabet.slice(); // Create a copy of the alphabet array

    //   for (var i = newAlpha.length - 1; i > 0; i--) {
    //     var j = Math.floor(Math.random() * (i + 1));
    //     [newAlpha[i], newAlpha[j]] = [newAlpha[j], newAlpha[i]];
    //   }
    //   stringArray.push(newAlpha);
    //   p = document.createElement("p");
    //   hihi.append(p);
    //   p.setAttribute("found", false)
    //   p.setAttribute("index", 0);
    //   p.setAttribute("m", m);

    //   iterateAlphabet(text, p)

    //   m++;
    // });

    // second repiattion
    async function iterateAlphabet(zh, p, sound) {

      m = parseInt(p.getAttribute("m"));
      index = parseInt(p.getAttribute("index"));
      found = p.getAttribute("found");
      // console.log(stringArray)
      newAlpha = stringArray[m]

      if (index < newAlpha.length) {
        var character = newAlpha[index];

        p.setAttribute("index", index + 1);

        // console.log(zh, character, p, index, newAlpha.length, found)

        if (found === "true") {

          // found = false
          // zar++
          // index = 0
          // iteratejira()
          console.log(p, "found")
          return;

        }
        // playPopSound()
        sound.currentTime = 0;
        sound.play()
        // Check if the current time of the audio has reached the stop time



        // popSound.play();
        p.innerHTML = character;

        if (zh === character) {
          p.setAttribute("found", true);
          // result += zh

        }
        await sleep(100)			//Introduce a 1000ms (1 second) delay before the next iteration
        await iterateAlphabet(zh, p, sound); // Continue with the next character
      } else {
        // found = false
        // zar++
        // index = 0           // can be use input is not in alpabhet
        // result += zh
        // iteratejira()
        p.innerHTML = zh
        console.log(p, "end")
        // iterateAlphabet(zh, p) 
        //await sleep(100); // Introduce a 1000ms (1 second) delay before moving to the next character in 'text'
        //await iteratejira(); // Move to the next character in 'text'
      }
    }

    // Call the initial invocation of iteratejira
    await iteratejira();
  }

  // Call the function to start iterating through the alphabet
  // zara("Kuch bhi");
  document.getElementById("btn").addEventListener("click", function () {
    // Play the audio when the button is clicked
    zara("kuch bhi")
  });





</script>

</html>






// to add payment, when which was written beofr eor after but advacne
router.post("/paying", async (req, res) => {

//     const { yValue, doc_id, payment } = req.body;
//     const current_login_user_id = "fiuewbifbsdbfbsdkjfbdskjbf";

//     // Convert yValue to an integer (assuming it represents the index)
//     const yIndex = parseInt(yValue) + 1;

//     // Define the update operation
//     const updateOperation = {
//         $push: {
//             // Construct the field path dynamically based on the index (yIndex)
//             [`name.${yIndex}.0.payment`]: {
//                 user_id: current_login_user_id,
//                 amount: payment,
//                 date: new Date(),
//             },
//         },
//     };

//     // Execute the update operation
//     Table.findOneAndUpdate(                                         // changes query to not return new doc to save server
//         { _id: doc_id }, // Specify the document to update by _id
//         updateOperation,
//         { new: true }, // This option returns the modified document 
//         function (err, result) {
//             if (err) {
//                 console.log("Error updating document:", err);
//                 return res.status(500).json({ error: "Database error" });
//             }
//             if (!result) {
//                 // Handle the case where the document is not found
//                 return res.status(404).json({ error: "Document not found" });
//             }

//             console.log(result.name[yIndex][0].payment);
//             // return res.json("dsgdf");
//             Yablw = result;
//             // console.log(Yablw);
//         }
//     );


    
    
// });










// the animation over p using css
 .item {
            flex: 0 0 auto;
            /* Don't grow or shrink items */
            width: 100px;
            /* Set the width of each item */
            height: 50px;
            margin-right: 10px;
            /* Add space between items */
            background-color: rgb(255, 255, 255);
            border: 1px solid gray;
            display: inline-flex;
            /* Ensure items stay inline */
            align-items: center;
            justify-content: center;
            /* Center the content both vertically and horizontally */

            background-color: transparent;
            overflow: hidden; /* Hide overflow to prevent clipping */

            position: relative; /* Add relative positioning for pseudo-element */

        }

        .item>p {
            margin: 0;
            /* Remove margin to center vertically */
            text-align: center;
            /* Center the text horizontally */

            width: 100px;

            font-size: larger;

            /* background-color: rgb(255, 255, 255); */
            /* background-color: black; */
            z-index: 1;

            /* mix-blend-mode:exclusion; Apply blend mode to <p> content */
            /* color: transparent; */
            pointer-events: none;
        }

        .clicked{

        }

        
        /* .item>p::before {
            content: ""; */
            /* Create a pseudo-element */
            /* position: absolute; */
            /* Position it absolutely to the <p> */
            /* display: inline-block; */
            /* top: 35%; */
            /* top: 0;
            left: 0; */
            /* width: 100%; */
            /* height: 0; */
            /* height: 100%; */
            /* Initially set height to 0 */
            /* background-color: rgb(255, 255, 255); */
            /* Set background color for the pseudo-element */
            /* opacity: 1; */
            /* Initially set opacity to 1 (visible) */
            /* transition: height 0.3s, opacity 0.9s, top 0.3s; */
            /* Add transitions for height and opacity */
            /* z-index: -2;
        } */

        /* .item:hover>p::before { */
            /* height: 100%; */
            /* transform: scaleX(1) scaleY(1); Expand the pseudo-element to 100% width and height */
            /* Grow the pseudo-element to 100% height on hover */
            /* opacity: 1;
            height: 100%; */
            /* top: 0; */
            /* Hide the pseudo-element on hover */
        /* } */
/* 
        .item>p::after {
            content: ""; */
            /* Create a pseudo-element */
            /* position: absolute; */
            /* Position it absolutely to the <p> */
            /* display: inline-block; */
            /* top: 50%; */
            /* top: 0;
            left: 0;
            width: 100%;
            height: 0; */
            /* height: 100%; */
            /* Initially set height to 0 */
            /* background-color: rgb(255, 255, 255); */
            /* background-color: transparent; */
            /* Set background color for the pseudo-element */
            /* opacity: 1; */
            /* Initially set opacity to 1 (visible) */
            /* transition: height .5s, opacity 0.9s, top 0.5s,  border-radius .5s ease-out; */
            /* Add transitions for height and opacity */
            /* z-index: 2; */
            /* mix-blend-mode: red; Apply a blend mode to make it visible only through transparent parts */
            /* border: 0 solid red; */
            /* border-radius: 100%; */
            /* mix-blend-mode: difference; 
        } */

        /* .item:hover>p::after { */
            /* height: 100%; */
            /* transform: scaleX(1) scaleY(1); Expand the pseudo-element to 100% width and height */
            /* Grow the pseudo-element to 100% height on hover */
            /* opacity: 1;
            height: 100%;
            top: 0;
            border-radius: 0; */
        
            /* Hide the pseudo-element on hover */
        /* } */
        /* .item>p:hover {

            height: 100%;
        } */

        /* .clicked>p::before {
            background-color: grey;

        }
        .clicked:hover>p::after {
            background-color: grey;

        } */