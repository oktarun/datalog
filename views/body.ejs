<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>

    <style>
        /* * {
            background-color: black;
            color: whitesmoke;
        } */

        body {
            background-color: black;
            overflow-x: hidden;
        }



        /* Add a slim scroll bar with a custom width */
        ::-webkit-scrollbar {
            width: 8px;
            /* Adjust the width as needed */
        }

        /* Customize the appearance of the scroll bar track */
        ::-webkit-scrollbar-track {
            background-color: #f1f1f1;
            /* Change the background color as needed */
        }

        /* Customize the appearance of the scroll bar thumb (the draggable part) */
        ::-webkit-scrollbar-thumb {
            background-color: #888;
            /* Change the thumb color as needed */
            border-radius: 4px;
            /* Add rounded corners to the thumb */
        }


        .container {
            display: flex;
            overflow-x: auto;
            /* Enable horizontal scrolling */
            width: 100%;
            /* Ensure the container takes up the full width of its parent */
            max-width: 100%;
            /* Prevent content from overflowing horizontally */
            white-space: nowrap;
            /* Keep items in a single line */
            /* Hide the scroll bar */
            scrollbar-width: none;
            /* Firefox */
            -ms-overflow-style: none;
            /* Internet Explorer and Edge */
            /* margin: 0 0 0 10px; */

            background-color: white;

            backdrop-filter: blur(10px);
            /* Apply a blur effect to the background */
            background-color: black;


        }

        /* #gram-list {
            background: linear-gradient(to bottom, #ffffff, #973200, #000000, #9f5500, #ffffff, #a36800, #000000);
            text-transform: uppercase;
        }

        #wdfk {
            background: linear-gradient(to bottom, #000000, #ba5b5b, #dbd6d6, #2f2d2d, #ffffff, #000000, #ffffff);
        } */

        .container::-webkit-scrollbar {
            display: none;
            /* Hide the scroll bar in Webkit browsers (Chrome, Safari, etc.) */
        }

        .item {
            flex: 0 0 auto;
            /* Don't grow or shrink items */
            min-width: 70px;
            width: max-content;
            /* Set the width of each item */
            height: 40px;
            margin-right: 10px;
            /* Add space between items */
            background-color: rgb(255, 255, 255);
            color: rgb(0, 0, 0);
            border: 1px solid gray;
            display: inline-flex;
            /* Ensure items stay inline */
            align-items: center;
            justify-content: center;
            /* Center the content both vertically and horizontally */

            /* background-color: transparent; */
            /* overflow: hidden; */
            /* Hide overflow to prevent clipping */

            margin: 15px 15px 0px 0px;








        }

        /* .item:first-letter{
            text-transform: uppercase;
        } */

        .item>p {
            margin: 0;
            /* Remove margin to center vertically */
            text-align: center;
            /* Center the text horizontally */

            width: 100%;


            font-size: larger;

            /* background-color: rgb(255, 255, 255); */
            /* background-color: black; */
            z-index: 1;

            /* mix-blend-mode:exclusion; Apply blend mode to <p> content */
            /* color: transparent; */
            pointer-events: none;


        }

        .clicked {

            /* background-color: rgb(0, 0, 0);
            color: white;
            border-top: 1px white solid;
            border-left: 1px white solid;
            border-right: 1px white solid;
            border-bottom: rgb(0, 0, 0) solid 1px; */

            background: linear-gradient(to bottom, #7e7373, #000000);

            border-color: #000000;





        }

        .clicked>p {
            background-clip: text;
            -webkit-background-clip: text;
            color: white;
            font-weight: bolder;

        }

        /* #gram-list>.clicked {
            background: linear-gradient(to bottom, #7e7373, #000000);

            border-color: #000000;


        }

        #gram-list>.clicked>p {
            background-image: linear-gradient(to bottom, #ffffff, #ffffff);
            
           


        }

        #wdfk>.clicked {
            background: linear-gradient(to bottom, #7e7373, #000000);

            border-color: #000000;


        }

        #wdfk>.clicked>p {
            background-image: linear-gradient(to bottom, #ffffff, #ffffff);


        } */


        /* .item>p::before {
            content: ""; */
        /* Create a pseudo-element */
        /* position: absolute; */
        /* Position it absolutely to the <p> */
        /* display: inline-block; */
        /* top: 35%; */
        /* top: 0;
            left: 0; */
        /* width: 100%; */
        /* height: 0; */
        /* height: 100%; */
        /* Initially set height to 0 */
        /* background-color: rgb(255, 255, 255); */
        /* Set background color for the pseudo-element */
        /* opacity: 1; */
        /* Initially set opacity to 1 (visible) */
        /* transition: height 0.3s, opacity 0.9s, top 0.3s; */
        /* Add transitions for height and opacity */
        /* z-index: -2;
        } */

        /* .item:hover>p::before { */
        /* height: 100%; */
        /* transform: scaleX(1) scaleY(1); Expand the pseudo-element to 100% width and height */
        /* Grow the pseudo-element to 100% height on hover */
        /* opacity: 1;
            height: 100%; */
        /* top: 0; */
        /* Hide the pseudo-element on hover */
        /* } */
        /* 
        .item>p::after {
            content: ""; */
        /* Create a pseudo-element */
        /* position: absolute; */
        /* Position it absolutely to the <p> */
        /* display: inline-block; */
        /* top: 50%; */
        /* top: 0;
            left: 0;
            width: 100%;
            height: 0; */
        /* height: 100%; */
        /* Initially set height to 0 */
        /* background-color: rgb(255, 255, 255); */
        /* background-color: transparent; */
        /* Set background color for the pseudo-element */
        /* opacity: 1; */
        /* Initially set opacity to 1 (visible) */
        /* transition: height .5s, opacity 0.9s, top 0.5s,  border-radius .5s ease-out; */
        /* Add transitions for height and opacity */
        /* z-index: 2; */
        /* mix-blend-mode: red; Apply a blend mode to make it visible only through transparent parts */
        /* border: 0 solid red; */
        /* border-radius: 100%; */
        /* mix-blend-mode: difference; 
        } */

        /* .item:hover>p::after { */
        /* height: 100%; */
        /* transform: scaleX(1) scaleY(1); Expand the pseudo-element to 100% width and height */
        /* Grow the pseudo-element to 100% height on hover */
        /* opacity: 1;
            height: 100%;
            top: 0;
            border-radius: 0; */

        /* Hide the pseudo-element on hover */
        /* } */
        /* .item>p:hover {

            height: 100%;
        } */

        /* .clicked>p::before {
            background-color: grey;

        }
        .clicked:hover>p::after {
            background-color: grey;

        } */





        /* .item1 {
            flex: 0 0 auto; */
        /* Don't grow or shrink items */
        /* width: 100px; */
        /* Set the width of each item */
        /* height: 50px;
            margin-right: 10px; */
        /* Add space between items */
        /* background-color: rgb(255, 255, 255);
        border: 1px solid gray;
        display: inline-block; */
        /* Ensure items stay inline */
        /* } */

        .itemlast:nth-child(1) {
            order: 2;
            /* Move the first item to the end */
            display: none;
            /*  if admin make it block  */
        }

        /* .item1 {
            order: 2; */
        /* Move the first item to the end */
        /* } */


        /* Add this CSS to style the overlay */
        /* For Adder*/
        /* .overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5); */
        /* Semi-transparent black overlay */
        /* z-index: 1000; */
        /* Ensure the overlay appears above other elements */
        /* display: none; */
        /* Hide the overlay by default */
        /* } */

        .overlay-content {
            position: absolute;
            top: 50%;
            left: 30%;
            height: 40%;
            width: 50%;
            /* transform: translate(-50%, -50%); */
            background-color: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
            z-index: 1001;
            /* Ensure the content appears above the overlay */
            background-color: grey;




        }

        .overlay-content>form>input {
            height: 100px;
            width: 70%;
            font-size: larger;




        }

        .overlay-content>form>button {
            height: 100px;
            width: 25%;
            font-size: larger;
            background-color: rgb(117, 226, 117);




        }


        /* #minimizeButton {
            position: absolute;
            top: 10px;
            right: 10px;
            background-color: #f0f0f0;
            border: none; */
        /* border-radius: 5px;
            padding: 50px 10px; */
        /* margin: 20px; */
        /* cursor: pointer;
        } */

        /* Css for table*/
        .grid-container {
            width: calc(100%-5);
            /* Set a fixed width for the container */
            overflow: hidden;
            /* Allow scrolling if content overflows */
            border: 1px solid rgb(0, 0, 0);
            /* min-height: 100%;
            max-height: fit-content; */
            margin-top: 20px;
            min-height: 450px;
            max-height: auto;

        }

        .grid-container::-webkit-scrollbar {
            display: none;
            /* Hide the scroll bar in Webkit browsers (Chrome, Safari, etc.) */
        }

        #gridTable {

            display: flex;
            flex-direction: column;
            width: 100%;
            overflow: auto;
            /* Enable horizontal scrolling */
            /* width: max-content; */
            white-space: nowrap;
            /* Prevent line breaks within cells */
            /* padding: 20px; */
            /* border: 1px solid rgb(255, 255, 255); */
            background: linear-gradient(to top, bisque, bisque);
        }

        #gridTable::-webkit-scrollbar {
            display: none;
            /* Hide the scroll bar in Webkit browsers (Chrome, Safari, etc.) */
        }

        /* #gridTable tr :not(.tableRowHeader){ */
        /* padding: 25px 0; */
        /* margin: 25px 0 ; */
        /* } */



        /* worker table  */
        .workerTable tr {
            height: 50px;
            display: flex;
            flex-direction: row;
            /* or column, depending on your layout */
            margin: 8px 0;
            border: #ffffff solid .5px;
            width: max-content;
            /* width: fit-content; */
            padding: 2px;
            /* background: grey; */

            /* box-sizing: content-box;
            border-bottom: 5px solid red; */


        }

        .workerTable tr td {
            position: relative;
            height: 90%;
            /* border: 1px solid gray; */
            /* margin: 15px 5px; */
            width: 100px;
            /* width: fit-content; */
            margin: 0px 15px 5px 0px;
            background-color: transparent;
            /* font-size: 20px; */
        }

        .workerTable tr td.pay {
            position: relative;
            height: 90%;
            /* border: 1px solid gray; */
            /* margin: 15px 5px; */
            width: fit-content;
            /* width: fit-content; */
            /* margin: 0px 15px 5px 0px; */
            background-color: transparent;
            /* font-size: 20px; */

            display: inline-block;
            /* max-width: 200px; */


            /* display: inline-block; */
            overflow: hidden;
            /* transition: max-width .5s ease; */
        }

        .workerTable tr td.pay div {
            transition: width 0.5s ease;



        }



        .pay-enable {

            width: fit-content !important;
            margin: 0px 15px 5px 0px !important;


        }

        .pay-disable {

            /* max-width: 0px     !important;   */
            margin: 0 0 0 0 !important;

            pointer-events: none;

        }

        .pay-disable>div {

            width: 0px !important;


        }


        .workerTable tr td:nth-child(2) {

            position: sticky;
            left: 0;
            background-color: #f1f1f1;
            /* Change the background color as needed */
            z-index: 1;

        }


        .workerTable tr td input {

            min-width: 100%;
            width: 100%;
            /* width: calc(100% - 10px); */
            /* Adjust for cell padding */
            height: 100%;
            box-sizing: border-box;
            white-space: nowrap;
            text-align: center;
            border: none;
            /* Remove border to avoid extra width */

            background-color: transparent;
            font-weight: bolder;
            font-size: small;



            /* border-left: black solid .1px ; */
            /* border-right: black solid .1px ; */
        }

        /* .workerTable tr:not(.tableRowHeader) td input {
            background-color: rgba(114, 203, 200, 0.1);
        } */

        /* reasonTable */


        .reasonTable tr {
            /* height: 45px; */
            min-height: 45px;
            /* max-height: max-content; */
            /* height: max-content; */
            display: flex;
            flex-direction: row;
            /* or column, depending on your layout */
            /* padding: 10px 0; */
            margin: 10px 0;
            border: #ffffff solid .5px;
            width: max-content;
        }

        .reasonTable tr td {
            position: relative;
            height: inherit;
            border: 1px solid gray;
            margin: 0 5px;
            overflow: auto;
            width: 150px;

        }

        .reasonTable tr td input {
            width: 100%;
            /* width: max-content; */
            /* width: calc(100% - 10px); */
            /* Adjust for cell padding */
            /* min-height: max-content; */
            height: 100%;
            /* box-sizing: border-box; */
            /* white-space: nowrap; */
            text-align: center;
            border: none;
            /* overflow-x: auto;
            overflow-y: auto; */
            /* Remove border to avoid extra width */

            /* Allow the input to grow in height */


        }

        .reasonTable tr td:first-child {
            width: fit-content;
        }

        .reasonTable tr td input[axis-x="0"] {
            min-width: 100px;
            max-width: 150px;
            width: 50px;
            font-weight: bolder;
        }

        .reasonTable tr td textarea {
            width: 100%;
            display: flex;
            flex-direction: column;
            /* width: max-content; */
            /* width: calc(100% - 10px); */
            /* Adjust for cell padding */
            /* min-height: max-content; */
            /* height: 100%; */
            box-sizing: border-box;
            /* white-space: nowrap; */
            text-align: center;
            justify-content: center;
            border: none;
            /* overflow-x: auto;
            overflow-y: auto; */
            /* Remove border to avoid extra width */
            resize: none;
            /* Allow the input to grow in height */
            /* height: 200px; */
            padding: 5px 15px 5px 5px;
            font-size: large;
            /* max-height: 300px; */
        }

        /*  for rop of table */
        .tableRowHeader {
            /* CSS styles for the specific <tr> element with axis-y="0" */
            background-color: #f0f0f0;
            font-weight: bolder;
            /* Example background color */
        }

        .tableRowHeader>.pay>div {
            background-color: #f0f0f0;
            ;
        }


        tr[axis-y="0"] td input {
            font-weight: bolder;
            font-size: medium;
        }

        td.atten {
            max-width: fit-content;
        }

        .workerTable>tr:nth-child(odd):not(.tableRowHeader) {
            /* background-color: rgb(207 148 171 / 57%); */
            /* padding: 10px; */
            box-shadow: 0 -8px 0 0 #ccc2c2 inset;
            /* This creates a shadow only at the bottom */
        }

        .workerTable>tr:nth-child(even):not(.tableRowHeader) {
            background-color: rgb(155 144 152 / 32%);
            /* padding: 10px; */
            box-shadow: 0 -8px 0 0 #efb5b5 inset;
            /* This creates a shadow only at the bottom */
        }

        #addToTable {
            margin-top: 25px;
            width: 100%;
            /* display: none; */

            height: 100px;
            box-sizing: border-box;
            border: 1px black solid;




            transition: max-height .4s ease;
        }

        #addToTable.off {
            max-height: 1px;


            /* background-color: transparent; */
            /* border: 1px solid transparent; */
            pointer-events: none;

        }

        #addToTable.on {

            max-height: 100px;


        }







        /* for svg + icon */
        #plusIcon {
            width: 100%;
            height: 100%;
            background-color: #f0f0f0;
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: pointer;
        }





        /* for reccomender */
        /* Style for the recommendations container */
        #recommendations-container {
            display: flex;
            flex-wrap: wrap;
            justify-content: space-around;
        }

        .reccomendDivHolder {
            display: flex;
            /* Use Flexbox layout */
            flex-direction: column;
            /* Stack children vertically */
            display: none;
            position: fixed;
            top: 20%;
            width: 100%;
            height: 80%;
            z-index: 10;
            overflow: hidden;
        }

        .reccomendDivHolder>input {
            display: inline-block;
            width: 100%;
            height: 8%;
        }

        .reccomendDivHolder>.reccomendDiv {
            width: 100%;
            position: relative;
            /* top: 0; */
            height: 92%;
            /* flex: 1; */
            overflow-y: scroll;
            overflow-x: hidden;

        }

        /* Style for each recommendation box */
        .recommendation-box {
            width: 100%;
            background-color: #f0f0f0;
            border: 1px solid #ddd;
            /* margin: 10px;
            padding: 10px; */
            display: flex;
            /* height: fit-content; */
            height: 200px;
        }

        /* Style for the user image */
        .recommendation-box img {
            max-width: 100px;
            max-height: 100px;
            border-radius: 50%;
            margin-right: 10px;
            pointer-events: none;
        }

        /* Style for the user information (name, age, father name) */
        .worker-info {
            flex-grow: 1;
            pointer-events: none;
        }

        /* Style for user name and age */
        .worker-name {
            font-weight: bold;
            pointer-events: none;
        }

        .worker-age {
            font-weight: bold;
            pointer-events: none;
        }

        /* Style for user father name */
        .worker-father {
            color: #777;
            pointer-events: none;
        }

        /* for attenadscne svg */

        td.atten::before {
            content: "";
            border: rgba(255, 0, 0, 0.2) .2px solid;
            position: absolute;
            top: 0;
            right: 0;
            /* bottom: 0; */
            /* left: 0; */

            height: 100%;
            width: var(--present-beforeDisplay);
            ;

            /* background-color: rgba(74, 102, 137, 0.2); */
            background: linear-gradient(to right, #ffffff, #dedbda, #b6aeae, #8f8881, #8d8585, #c4c0b8, #978f8f);
            /* mix-blend-mode: difference; Apply the difference blend mode */

            /* Use rgba to set transparency (0.2 for example) */
            opacity: .3;
            /* Keep opacity at 1 for better blending */
            pointer-events: none;
            z-index: 2;

            /* display: var(--present-beforeDisplay); */
            display: block;
            transition: width 0.5s ease-in-out;





        }

        .tableRowHeader>.atten::before {
            display: none;
        }


        td>svg,
        .atten {
            width: 100%;
            width: 60px;
            height: 100%;
            pointer-events: var(--present-svgPointerEvents);

        }

        #switch-circle {
            pointer-events: none;
            /* color: red; */



        }

        #switch>rect {
            pointer-events: none;
            fill: whitesmoke;
        }



        /* for dihaadi */
        #dihaad {
            width: 100%;
            height: 30px;
            /* margin: 10px 0; */
            padding: 10px 0;
            background: linear-gradient(to bottom, #000000, rgb(111, 107, 102), bisque);
            display: flex;
            /* Use flexbox to align items horizontally */
            align-items: center;
            /* Vertically center items */

        }

        #dihaad>p {
            width: fit-content;
            height: 100%;
            margin: 0;
            color: white;
            background-color: rgba(211, 165, 165, 0.2);



        }

        /* #dihaad >p >input{
           width: 20px;
           height: 20px;
        } */

        #dihaad>input {

            margin-left: auto;
            /* Move this item to the end */

            /* margin-right: 0px; */
            /* order: 2; */
            width: 25%;
            height: 100%;
            position: relative;
            /* Position the input absolutely */
            /* right: 0; */
            /* left: 75%; */
            /* Align the input to the right */
            display: inline;

            background-color: rgb(0, 0, 0);
            color: white;
            font-weight: bolder;
            font-size: larger;
            font-stretch: semi-expanded;

        }



        /* for pay */
        .pay {
            height: 100%;
            width: fit-content;
            /* display: none; */

        }

        .pay>div {
            height: 100%;
            width: 50px;
            display: flex;

            box-sizing: content-box;
            box-sizing: border-box;
            background-color: #b60000;
            color: whitesmoke;
            /* Add this line */
            /* border: #4cdd88 .5px solid; */

            align-items: center;
            justify-content: center;

            pointer-events: none;
        }



        .pay {
            margin: 0 0;
            /* border-bottom: 3px solid rgb(226, 226, 34);
            border-top: 3px solid rgb(226, 226, 34);
            cursor: pointer; */
        }











        /*  pay window */


        #payWindow {
            /* position: relative; */
            /* top: 500px; */
            /* margin-bottom: 200px; */
            /* height: 201px; */
            height: auto;
            /* Allow the container to expand with content */
            width: 100%;
            display: none;
            position: fixed;
            bottom: 0;
            /* top:201px; */
            z-index: 10;
            border: 5px red solid;
            flex-direction: column;
            /* Added to stack child elements vertically */



        }

        #pay-worker-profile {
            flex: 1;
            display: flex;
            flex-direction: row;
            /* align-items: center; */
            width: 100%;
            height: 100%;
            /* margin-bottom: 100px; */


        }

        #pay-worker-photo {


            flex: 1;
            /* text-align: center; */

            width: 50%;
            /* Set the desired width for your div */
            height: 200px;
            /* Set the desired height for your div */
            /* background-image: url('your-image.jpg'); */
            /* Replace 'your-image.jpg' with the path to your image */
            background-size: cover;
            /* This will scale the image to cover the entire div while maintaining its aspect ratio */
            background-position: center;
            /* This centers the background image within the div */

            border: white 1px solid;


        }

        #pay-worker-info {

            flex: 2;
            /* padding: 10px; */
            height: 100%;

        }

        #pay-worker-info>p {

            margin: auto 0;

        }

        /* #pay-worker-image{
            width: 100px;
            height: 100px;
            border-radius: 50%;
        } */


        /* pay form */

        #pay-form {
            flex: 2;
            width: 100%;
        }

        #pay-form>input {
            width: 100%;
            height: 200px;
            font-size: 100px;

        }

        input[type="number"]::-webkit-inner-spin-button,
        input[type="number"]::-webkit-outer-spin-button {
            -webkit-appearance: none;
            appearance: none;

        }

        #pay-amount {
            text-align: center;

        }

        /* pay control */


        .pay-control {
            display: flex;
            flex-direction: row;
            justify-content: space-between;
            width: 100%;
            height: 75px;
            /* border: 1px solid red; */
            background-color: bisque;
        }

        .pay-control>.controller {
            width: 45%;
            height: 100%;
            border: 1px solid rgb(8, 8, 8);



            /* for centering text */
            display: flex;
            justify-content: center;
            align-items: center;



        }

        .pay-control>span:first-child {
            /* Your styles for the first div element */
            /* For example: */
            background-color: rgb(255, 255, 255);

        }


        .green {
            background-color: green;
        }

        .green:hover {
            background-color: rgb(9, 185, 9);
        }

        .grey {
            background-color: grey;
            pointer-events: none;
        }

        /* reason adder */

        #reasonAdder {
            /* position: fixed; */
            width: 100%;
            height: fit-content;
            border: 1px solid rgb(153, 255, 19);
            /* display: flex; */
            display: none;
            flex-direction: column;
            /* justify-content: space-around; */
            /* align-items: center; */
            z-index: 10;
            position: fixed;
            /* top: 25%; */
            bottom: 0;
        }

        #reasonDate {
            width: 100%;
            height: 75px;
            border: 1px solid rgba(168, 0, 0, 0.567);
            font-size: larger;
            text-align: center;



        }

        #reasonEssents {
            width: 100%;
            height: 250px;
            border: 1.5px solid rgb(255, 255, 255);
            display: flex;
            flex-direction: row;
            justify-content: space-between;
            align-items: center;

        }


        #reasonEssents>span {

            height: 100%;
            border: 1px solid rgb(255, 255, 255);
        }

        #reasonEssents>#reasonReason {
            width: 60%;

            font-size: medium;

            text-align: justify;



        }

        #reasonReason>textarea {

            width: 100%;
            height: inherit;

            font-size: inherit;

            text-align: inherit;
            resize: none;
            box-sizing: border-box;

            padding: 20px 0 0 0;

            /* word-spacing: 509px; Adjust the spacing as needed */

            /* line-height: 2; Adjust the spacing as needed */

            line-height: 2;
            /* Adjust the line height to add spacing between lines */
            letter-spacing: 2px;
            /* Adjust the letter spacing to add spacing between letters */
            /* padding: 10px; */
            /* Optional: Add padding for better readability */
        }

        #reasonEssents>#reasonAmount {
            width: 40%;

            font-size: larger;

            text-align: center;



        }

        #reasonAmount>input {
            width: 100%;
            height: calc(100% - 4px);

            font-size: inherit;

            text-align: inherit;


        }




        #reasonController {
            width: 100%;
            height: 75px;
            border: 1px solid rgb(255, 255, 255);
            display: flex;
            flex-direction: row;
            justify-content: space-around;
            align-items: center;
            margin-top: 20px;

        }

        #reasonController>button {
            width: 50%;
            height: 100%;

            border: 1px solid rgb(255, 255, 255);
            display: flex;
            flex-direction: row;
            justify-content: center;
            align-items: center;
            cursor: pointer;

        }

        #reasonCancel {
            background-color: rgba(255, 8, 8, 0.381);

        }

        #reasonCancel:hover {
            background-color: rgba(255, 51, 51, 0.418);
        }

        .reasonHeader>td>* {
            font-size: small;
        }

        /* #reasonSave {
            background-color: rgba(8, 255, 8, 0.418);

        }

        #reasonSave:hover {
            background-color: rgba(21, 246, 21, 0.8);

        } */

        /* #kyhua{
            width: 100%;
            height: 100px;
        } */
        blurer {
            width: 100%;
            height: 100%;
            position: fixed;
            top: 0;
            left: 0;
            background-color: rgba(0, 0, 0, 0.5);
            /* Semi-transparent black background */
            z-index: -9;
            display: none;

        }


        .nodisplay {
            display: none;
        }

        :root {
            --present-svgPointerEvents: none;
            --present-beforeDisplay: 100%;

        }
    </style>
</head>

<body>

    <!-- top two  -->
    <div class="container" id="gram-list">
        <div class="item itemlast" id="nest" onclick="onNesta()">
            <div id="plusIcon">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
                    <path d="M0 0h24v24H0z" fill="none" />
                    <path
                        d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 13h-4v4h-2v-4H7v-2h4V7h2v4h4v2z" />
                </svg>
            </div>
        </div>

    </div>
    <div class="container" id="wdfk"></div>


    <!-- table shit -->

    <div class="grid-container">
        <div id="dihaad">
            <p>Enter Master Mode<input type="checkbox" id="masterMyCheckbox"></p>
            <input id="dihaadi" type="num" value="" placeholder="Please add dihaadi">
        </div>
        <table id="gridTable">
            <!-- Your table rows and cells go here -->
        </table>
        <button id="addToTable" class="off">Add Worker</button>
    </div>





    <!-- payment shit  -->

    <div class="" id="payWindow">
        <div id="pay-worker-profile">
            <div id="pay-worker-photo">
                <!-- <img src="your-photo-url.jpg" alt="Profile Photo" id="pay-worker-image"> -->
            </div>
            <div id="pay-worker-info">
                <p><strong>Name:</strong> <span></span></p>
                <!--     // pay html -->
                <p><strong>Father Name:</strong> <span></span></p>
            </div>
        </div>
        <!-- <hr> -->



        <div id="pay-form">
            <input type="number" id="pay-amount">



            <div class="pay-control">

                <span class="controller"> Cancel </span>

                <span class="controller grey" id="pay-it"> Pay </span>
            </div>




        </div>
    </div>



    <!-- reason adder -->

    <div id="reasonAdder">
        <span id="reasonDate"></span>
        <span id="reasonEssents">
            <span id="reasonReason"><textArea type="text" id="reasonText"></textarea></span>
            <span id="reasonAmount"><input type="number"></span>
        </span>
        <span id="reasonController">
            <button id="reasonCancel">Cancel</button><button id="reasonSave" class="grey">Save</button>

        </span>
    </div>

    <!-- <input id="kyhua"> -->
    <div class="reccomendDivHolder">
        <input type="text">

        <div class="reccomendDiv"></div>
    </div>

</body>


<!-- Add this div at the end of your body -->
<div id="overlay" class="overlay" style="display: none;"></div>

<blurer onclick="unblur()"></blurer><!-- used to create no clickable background when overview-->


<script>
    // Get the root element (usually <html> or <body>)
    const root = document.documentElement;


    // to enter master mode
    document.getElementById("masterMyCheckbox").addEventListener("change", masterE);
    function masterE(e) {

      
        console.log(e.target.checked);
        state = e.target.checked;

        if (!state) {
            document.getElementById("addToTable").classList.replace("on", "off")
            document.querySelectorAll(".pay").forEach((el) => {
                // el.style.display = "none";
                el.classList.replace("pay-enable", "pay-disable");
                // el.classList.remove("pay-enable");
            });
            root.style.setProperty('--present-svgPointerEvents', 'none'); // Change the value to green
            root.style.setProperty("--present-beforeDisplay", "100%"); // Change the value to green





        }

        if (state) {
            document.getElementById("addToTable").classList.replace("off", "on")
            document.querySelectorAll(".pay").forEach((el) => {
                // el.style.display = "inline-block";
                el.classList.replace("pay-disable", "pay-enable");
            });
            // Update the value of the CSS variable
            root.style.setProperty('--present-svgPointerEvents', 'auto'); // Change the value to green
            root.style.setProperty("--present-beforeDisplay", "0%"); // Change the value to green


        }




    };




    //  payPop up
    function payPop(event) {

        var clickedItem = event.target;
        var yValue = clickedItem.getAttribute("axis-y");
        console.log(event, yValue);
        worker_id = clickedItem.parentNode.getAttribute("worker-id");
        console.log(worker_id);

        // get worker profile and show it here with name fathers name photos
        // send req to get worker profile
        fetch('/workerprofile/profile' + worker_id)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json(); // Parse response body as JSON
            })
            .then(worker => {
                // Handle the retrieved data here
                console.log(worker);

                // then make rough payment frontend and payment button
                creatingPaymentPage(worker, yValue);

                // Create a box for worker detail and amount



            })
            .catch(error => {
                console.error('Fetch error:', error);
            });

    };

    function creatingPaymentPage(worker, yValue) {
        blur();
        paywindow = document.querySelector("#payWindow");
        paywindow.style.display = "flex";

        // payworker profile
        paywindow.querySelector("#pay-worker-photo").style.backgroundImage = `url(${worker.image})`;
        document.querySelector("#pay-worker-info > p:nth-child(1)>span").innerHTML = worker.name;
        // document.querySelector("#pay-worker-info > p:nth-child(2)>span").innerHTML = worker.Age;
        document.querySelector("#pay-worker-info > p:nth-child(2)>span").innerHTML = worker.FathersName;



        // pay button on iput change
        const payAmountInput = document.getElementById('pay-amount');

        cancelButton = document.querySelector(".pay-control>.controller:nth-child(1)");
        payButton = document.querySelector(".pay-control>.controller:nth-child(2)");

        payAmountInput.addEventListener('input', function () {
            // Check if the input is blank
            if (payAmountInput.value === '') {
                payButton.style.pointerEvents = "none"; // Disable the "Pay" button
                payButton.classList.remove("green");
                payButton.classList.add("grey");


            } else {
                console.log(payAmountInput.value)
                payButton.style.pointerEvents = "auto"; // Enable the "Pay" button
                payButton.classList.add("green");
                payButton.classList.remove("grey");

            }
        });



        // pay controller
        console.log(cancelButton, payButton)
        cancelButton.addEventListener("click", (event) => {
            console.log(event.target);
            unblur();
        });



        payButton.addEventListener("click", (event) => {
            axis_y = event.target.getAttribute("axis-y");

            console.log(event.target);
            fetch("table/pay", {
                method: 'Post',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ yValue, doc_id: window.doc_id, amount: document.querySelector("#pay-amount").value })

            })
                .then(response => response.json())
                .then(result => {
                    message(result.status, result.message)
                    console.log(result);
                    // paywindow.style.display = "none";
                    // location.reload();
                })
                .catch(error => console.error(error));

        });

















        // devolopment tools
        // navigator.clipboard.writeText(worker.image)
        //     .then(() => {
        //         console.log('Text copied to clipboard');
        //     })
        //     .catch((err) => {
        //         console.error('Error copying text to clipboard:', err);
        //     });
        // paywindow.querySelector("#pay-worker-photo").setAttribute("src", worker.image);

    }



    // create present absent svg in a cell and return cell
    function getPresentAbsentsvg(y, n, dataTable) {
        y == y;
        n == n;
        dataTable == dataTable;
        if (y == 0) {
            var cell = document.createElement("td");
            var div = document.createElement("div");

            cell.setAttribute("class", "atten");
            div.setAttribute("class", "atten");
            div.textContent = "";
            cell.appendChild(div);


        } else {
            // if (n > numCols) return;    


            var cell = document.createElement("td");
            cell.setAttribute("class", "atten");

            // // state of svg
            k = parseInt(dataTable[n][0].attendance.length) - 1;
            console.log(k);
            date = (dataTable[n][0].attendance[k] && dataTable[n][0].attendance[k].date);
            const dateToCompare = new Date(date);
            const today = new Date();
            p = dateToCompare.getDate() == today.getDate() && dateToCompare.getMonth() == today.getMonth() && dateToCompare.getFullYear() == today.getFullYear() ? true : false;
            let isSwitchedOn = p;


            var circleFill = isSwitchedOn ? "#00ff00" : "#ccc";
            var toggleSwitch = isSwitchedOn ? "" : 'onclick="presentSwitch(event)"'
            var cx = isSwitchedOn ? '80' : '20';
            // Create an SVG element as a string
            var circle = `<circle id="switch-circle" cx="${cx}" cy="25" r="18" fill="${circleFill}" value="${isSwitchedOn}" axis-y="${y}"/>`;
            // circle.value = isSwitchedOn;
            var svgContent = `
            <svg id="switch" xmlns="http://www.w3.org/2000/svg" width="100" height="50" viewBox="0 0 100 50" ${toggleSwitch}>
                <rect x="5" y="5" width="90" height="40" rx="20" ry="20" fill="#ccc" />
                ${circle}// define cricle as indepentedent and use this and set variableglobal
                </svg>
                `;

            cell.innerHTML = svgContent;


        }
        return cell;

    };

    //reason adder
    function addReason(params) {
        //activating Blurer
        blur();

        console.log("add reason");

        div = document.getElementById("reasonAdder");

        div.style.display = "flex";

        div.querySelector("#reasonDate").innerHTML = new Date().toLocaleDateString();

        inputAmount = div.querySelector("#reasonAmount>input");
        inputReason = div.querySelector("#reasonReason>textarea");

        reasonSaveButton = div.querySelector("#reasonSave");



        // reasonEssents

        div.querySelectorAll("#reasonEssents>span>input, #reasonEssents>span>textarea").forEach((input) => {
            input.addEventListener("input", (event) => {
                console.log(event.target.value)

                switch (inputAmount.value && inputReason.value) {
                    case "":
                        reasonSaveButton.style.pointerEvents = "none";
                        reasonSaveButton.classList.add("grey");
                        reasonSaveButton.classList.remove("green");
                        console.log("done done done done done done done")

                        break;

                    default:
                        reasonSaveButton.style.pointerEvents = "auto";
                        reasonSaveButton.classList.remove("grey");
                        reasonSaveButton.classList.add("green");

                        break;
                }
            });
        })




        // reasonControll

        div.querySelector("#reasonCancel").addEventListener("click", (event) => {
            console.log(event.target);
            unblur();

            div.style.display = "none"
        });

        div.querySelector("#reasonSave").addEventListener("click", (event) => {
            console.log("saving");




            fetch('/table/addReason', {
                method: 'Post',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ inputAmount: inputAmount.value, inputReason: inputReason.value, doc_id: window.doc_id, tableType: window.dataTable[0][1] })
            })
                .then(res => res.json())
                .then(response => {
                    message(response.status, response.message)
                    console.log(response);
                    div.style.display = "none";
                    // location.reload();
                })
                .catch(error => console.error(error));






        });


        // get the cell
        // get the y value
        // get the n value
        // get the reason
        // send the req
        // get the response
        // update the cell
        // update the data table
        // update the grid
        // update the database
        // update the doc
        // update the table
        // update the grid
        // update the database
        // update the doc
        // update the table
        // update the grid
        // update the database
        // update the doc
        // update the table
        // update the grid
        // update the database
        // update the doc
        // update the table
        // update the grid
        // update the database
        // update the doc
        // update the table
        // update the grid
        // update the database
        // update the doc
        // update the table
        // update the grid
        // update the database
        // update the doc
        // update the table
        // update the grid
        // update the database
        // update the doc


    }


    function unblur() {
        document.body.style.overflow = "auto";
        document.querySelector("blurer").style.zIndex = "-9";
        document.querySelector("blurer").style.display = "none";
        document.querySelector(".reccomendDivHolder").style.display = "none";
        document.querySelector("#reasonAdder").style.display = "none";
        document.querySelector("#payWindow").style.display = "none";
        document.querySelector(".overlay-content").style.display = "none";



    }

    function blur() {
        document.querySelector("blurer").style.zIndex = "9";
        document.querySelector("blurer").style.display = "block";
        document.body.style.overflow = "hidden";

    }


    // grid maker it will make grid and arrange data into them acc to type of database, run and data from function gettable(doc_id);
    function gridmaker(dataTable, yValue) {      // may be try to add aworker as totally different opotion under table
        gridTable.innerHTML = "";
        window.dataTable = dataTable;
        // console.log(dataTable)
        var numRows = dataTable[0][2]; // Number of rows (x-axis)
        // var numRows = 4; // Number of rows (x-axis)
        var numCols = dataTable.length - 2; // Number of columns (y-axis)  // use  // if it is 0 and run the add xaxis number of times   // minus 2 bcoz 1. array give len count from 1 and 2. we are getting data from n which +1 to y



        if (dataTable[0][1] === 3) {
            console.log("3");

            // setting table property
            gridTable.classList.add("reasonTable");
            gridTable.classList.remove("workerTable");


            document.getElementById("dihaadi").style.display = "none";
            // add an button for this
            addToTableOld = document.getElementById("addToTable");    // declaraing
            // removing all other event listner form add to Table
            addToTable = addToTableOld.cloneNode(true);
            addToTableOld.parentNode.replaceChild(addToTable, addToTableOld);

            addToTable.addEventListener("click", addReason);
            addToTable.innerHTML = "Add Reason";







            // Initialize the grid
            for (var y = 0; y <= numCols; y++) {
                n = y + 1;
                var row = document.createElement("tr");
                row.setAttribute("axis-y", y);
                if (y == 0) {
                    row.classList.add("tableRowHeader");

                }


                for (var x = 0; x <= numRows; x++) {



                    if (y >= 1) {

                        if (x === 0) {
                            date = new Date(dataTable[n].date);

                            var cell = createInputCell(x, y, date.toLocaleDateString());
                        }
                        if (x === 1) {
                            var cell = createInputCell(x, y, dataTable[n].reason, "text");
                        }
                        if (x === 2) {
                            var cell = createInputCell(x, y, dataTable[n].amount);
                        }


                        // console.log("y>=1",row, cell)

                    }
                    else {
                        var cell = createInputCell(x, y, (dataTable[n] && dataTable[n][x]) || "");
                        console.log(row, cell)

                    }

                    row.appendChild(cell);

                }
                gridTable.appendChild(row);
                textArea = gridTable.querySelector(`textArea[axis-y="${y}"]`);
                if (textArea) {
                    console.log("lastmein", textArea);
                    textArea.style.height = "auto";
                    textArea.style.height = textArea.scrollHeight + 5 + 'px';
                }




            }
            // addReason();
        }
        else {

            // setting table property
            gridTable.classList.add("workerTable");
            gridTable.classList.remove("reasonTable");

            addToTableOld = document.getElementById("addToTable");    // declaraing
            // removing all other event listner form add to Table
            addToTable = addToTableOld.cloneNode(true);
            addToTableOld.parentNode.replaceChild(addToTable, addToTableOld);
            // add an button for this
            addToTable.addEventListener("click", function () {

                //activating blurer
                blur();

                let scrollEventListener = true;
                window.scrollEventListener = scrollEventListener;

                // creating new using js alternative of if present i nhtml
                // reccomendDivHolder = document.createElement("div")
                // reccomendDivHolder.classList.add("reccomendDivHolder")

                // input = document.createElement("input");
                // input.setAttribute("type", "text");

                // reccomendDiv = document.createElement("div");
                // reccomendDiv.classList.add("reccomendDiv");

                // reccomendDivHolder.appendChild(input);
                // reccomendDivHolder.appendChild(reccomendDiv);

                // document.body.appendChild(reccomendDivHolder);



                reccomendDivHolder = document.querySelector(".reccomendDivHolder");                 // if div already exist in html
                reccomendDivHolder.style.display = "block"

                getWorker("", 0, true);

                // in input inside reccomendDivHolder adding event lsitenrr fo rinput

                input = reccomendDivHolder.querySelector("input");           // if already exist in html
                input.addEventListener("input", function (e) {
                    window.scrollEventListener = true

                    value = input.value

                    getWorker(value, 0, true);
                });

                // adding event listener for scroll here 
                var previousScrollTop = 0; // Initialize the previous scroll position
                let canRunCode = true;            // to make delay of 1 sec in code run to avoid code mutliplte time running
                window.canRunCode = canRunCode;
                reccomendDivHolder.querySelector(".reccomendDiv").addEventListener("scroll", function (event) {               // if already exist in html
                    // reccomendDiv.addEventListener("scroll", function (event) {
                    console.log(event.target);
                    if (!window.canRunCode || !window.scrollEventListener) return;         // .canRunCode wait for data to come and be added bedire again firing. and .scrollEventListene, ensure that data is no more on server to send so it truns off
                    console.log("!canCodeRun")

                    // if (!window.scrollEventListener) return; // if no more data left
                    var recommendationsContainer = event.target; // Use event.target to access the scrolled container
                    // Check if the user has scrolled to the bottom of the container
                    // if (recommendationsContainer.scrollHeight - recommendationsContainer.scrollTop === recommendationsContainer.clientHeight) {
                    // if (recommendationsContainer.scrollTop > previousScrollTop) {
                    // Calculate the scroll position related to reaching the bottom
                    var scrollPositionToBottom = recommendationsContainer.scrollHeight - recommendationsContainer.clientHeight; // Adjust the 10 as needed

                    if (recommendationsContainer.scrollTop >= scrollPositionToBottom) {
                        window.canRunCode = false;          // to delay the code execution and avoid repetative code running
                        // User has scrolled to the bottom
                        // You can add your code here to load more recommendations or perform other actions
                        console.log("Scrolled to the bottom!");
                        previousScrollTop = recommendationsContainer.scrollTop; // Update the previous scroll position
                        ignoreCount = recommendationsContainer.childElementCount;
                        value = input.value ? input.value : ""
                        console.log(value, ignoreCount)
                        getWorker(value, ignoreCount, false)

                        // Set a delay to prevent immediate execution
                        // setTimeout(function () {
                        //     window.canRunCode = true;
                        // }, 1000); // Adjust the delay (1000 milliseconds in this example)
                    }
                });


            });

            addToTable.innerHTML = "Add Worker";



            // dihaad and dihaadi
            document.getElementById("dihaadi").style.display = "block";
            var dihaadi = dihaad.querySelector("#dihaad > input");
            value = dataTable[0][3] ? dataTable[0][3][0] : false;   // to set dihaadi value  
            // value = dataTable[0][3][0];                          // even the below is working bcoz undefined is as false
            // console.log(value, !value)                           


            dihaadi.value = value ? value : "";
            if (value) {
                dihaadi.disabled = true;
            }
            if (!value) {

                // dihaadi.disabled = false;
                dihaadi.disabled = false;
                dihaadi.addEventListener("change", async (event) => {
                    console.log(event.target.value)
                    const setDihaadi = await fetch("table/dihaadi", {
                        method: 'Post',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ value: event.target.value, doc_id: window.doc_id })

                    })
                    const responseData = await setDihaadi.json();

                    message(responseData.status, responseData.message)

                    gridmaker(responseData.name, 0);
                    console.log(responseData)





                })
            }






            // Initialize the grid
            for (var y = 0; y <= numCols; y++) {
                n = y + 1;
                // console.log(y, n, numCols);




                var row = document.createElement("tr"); // insert y-value inside of it, instead adding it to each cell
                row.setAttribute("axis-y", y);

                if (y == 0) {
                    row.classList.add("tableRowHeader");

                }












                // instert a present absent button in row here;
                cell = getPresentAbsentsvg(y, n, dataTable);
                row.appendChild(cell);


                for (var x = 0; x <= numRows; x++) {

                    cnt = `${x}x, ${y}y`

                    if (y >= 1) {

                        if (x == 0) {
                            var cell = createInputCell(x, y, (dataTable[n] && dataTable[n][0].detail[1]) || "");   // to set worker 

                            // adding worker_id in row
                            row.setAttribute("worker-id", (dataTable[n] && dataTable[n][0].detail[0]) || "");
                            // cell.setAttribute("worker-id", (dataTable[n] && dataTable[n][0].detail[0]) || "");




                        }
                        else if (x == 1) {
                            // dow are pay
                            var td = document.createElement("td");
                            td.setAttribute("axis-y", y);
                            td.setAttribute("onclick", "payPop(event)");

                            td.setAttribute("class", "pay pay-disable");

                            var payBtn = document.createElement("div");
                            payBtn.textContent = "Pay";


                            td.appendChild(payBtn);

                            row.appendChild(td);
                            // up are pay button


                            cell = createInputCell(x, y, dataTable[n][0].attendance.length ? dataTable[n][0].attendance.length : "0");   // to set Np. of days>

                        }
                        else if (x == 2) {
                            len = dataTable[n][0].attendance.length;
                            total = value ? len * value : "Please ad dihadi";                                                  // total payment
                            window.total = total ? total : "0";
                            console.log(window.total, value, len);


                            var cell = createInputCell(x, y, window.total);
                        }
                        else if (x == 3) {

                            paids = dataTable[n][0].payment;
                            console.log(paids);
                            paid = 0;
                            for (const perPay of paids) {
                                paid += parseInt(perPay.amount);
                                console.log("ho raha hai na", paid)

                            }

                            window.paid = paid ? paid : "0";

                            var cell = createInputCell(x, y, window.paid);                                                              //paid amount

                        }
                        else if (x == 4) {


                            due = (typeof window.total === 'number' && typeof window.paid === 'number') ? (window.total - window.paid) : "___";



                            var cell = createInputCell(x, y, due);
                            console.log(cell, window.paid, window.total);


                        }

                        else {
                            var cell = createInputCell(x, y, (dataTable[n] && dataTable[n][x]) || "");
                        }


                    }

                    else {

                        if (x == 1) {
                            var td = document.createElement("td");
                            var payBtn = document.createElement("div");
                            payBtn.textContent = "";
                            td.setAttribute("class", "pay pay-disable");


                            td.appendChild(payBtn);

                            row.appendChild(td);                 // appending before the below cell, even if it will be below the cell it is gettting apppended first

                        }
                        var cell = createInputCell(x, y, (dataTable[n] && dataTable[n][x]) || "");

                    }

                    row.appendChild(cell);
                }
                gridTable.appendChild(row);
                // Call the function to adjust cell widths for the last cell of the current y-axis
                // var lastInputCell = row.cells[numRows - 1].querySelector("input");
                // adjustCellWidthTargetOnly(lastInputCell);
            }



            // Adjust cell widths within the same column (y-axis) as the changed cell adjustCellWidthTargetOnly(targetCell)


            // Add click event listener to the buttons
            // var addXAxisButton = document.getElementById("addXAxis");
            // var addYAxisButton = document.getElementById("addYAxis");
            // addXAxisButton.addEventListener("click", addXAxis);
            // addYAxisButton.addEventListener("click", addYAxis);


            // devolopment tools
            document.querySelector('td[axis-y="15"]') && document.querySelector('td[axis-y="15"]').click();
        } //end of else



        // create input cell, removing its from gridmaker, coz  want to run for 3 tto
        // Create an input cell with given x and y values
        function createInputCell(x, y, text, cr) {
            var cell = document.createElement("td");
            // if (x == 1 && y != 0 && cr === "text") {
            if (cr === "text") {
                var input = document.createElement("textarea");

                input.innerHTML = text || "";
                // input.style.height = "auto";
                // input.style.height = (input.scrollHeight) + 'px';
                // console.log(input)
                // console.log(input.scrollHeight)

            }
            else {
                var input = document.createElement("input");
                input.value = text || "";
            }
            input.type = "text";



            // Set custom attributes for x and y values
            input.setAttribute("axis-x", x);
            input.setAttribute("axis-y", y);
            // input.style.width = (input.scrollWidth) + 'px';

            // to disable the first cell of y-axis with ther name already set increase a little bit
            // if (y == 0) {
            input.disabled = true;
            // }
            // else {
            // input.disabled = false;
            // }



            // adding workername calling event listener
            // if (x == 0 & y != 0) {                                          // add a check and set only if it is blank
            //     // console.log(input)
            //     input.addEventListener("input", (event) => getWorker(event))
            // }

            // // nadd event lostener to cell wise by which need or not input.addEventListener("kuchbitoh", function (event)


            cell.appendChild(input);

            return cell;
        }


    }; // end of gridmaker;

    // ask for confirmation for attendance present
    // async function askConfirm(event) {
    //     name = event.target.parentNode.nextElementSibling.querySelector("input").value;
    //     const confirmation = window.confirm(`Marking attendance for ${name}`);
    //     // console.log(event.target.parentNode.nextElementSibling)
    //     return confirmation


    // };


    async function askConfirm(event) {
        const name = event.target.parentNode.nextElementSibling.querySelector("input").value;

        const dialog = document.createElement('div');
        dialog.innerHTML = `
        <p>Marking attendance for <strong>${name}</strong></p>
        <button id="yesButton" class="green">Yes</button>
        <button id="noButton">No</button>
       <div style="display: inline-block;"><p style="display: inline-block;">Auto Cancel in </p><p id="attenCountTimer" style="display: inline-block;"></p></div>
    `;
        dialog.style.position = 'fixed';
        dialog.style.top = '50%';
        dialog.style.left = '50%';
        dialog.style.transform = 'translate(-50%, -50%)';
        dialog.style.backgroundColor = 'white';
        dialog.style.padding = '20px';
        dialog.style.border = '1px solid #ccc';
        dialog.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';
        dialog.style.zIndex = '9999';
        document.body.append(dialog);

        const yesButton = dialog.querySelector('#yesButton');
        const noButton = dialog.querySelector('#noButton');

        return new Promise((resolve) => {
            yesButton.addEventListener('click', () => {
                document.body.removeChild(dialog);
                resolve(true);
            });

            noButton.addEventListener('click', () => {
                document.body.removeChild(dialog);
                resolve(false);
            });

            const number = 15;

            const delayLoop = async (x) => {
                document.getElementById("attenCountTimer").innerHTML = number - x
                if (x === number) {
                    console.log("done");
                    document.body.removeChild(dialog);
                    resolve(false);
                    return;
                }

                await new Promise(resolve => setTimeout(resolve, 1000)); // Wait for 1 second
                delayLoop(x + 1);
            };

            delayLoop(0);
        });
    }



    //  toggle switch
    async function presentSwitch(event) {     // this switch is designed for multiple use but we will hamper that by removing onclick from svg

        confirm = await askConfirm(event)
        console.log(confirm)

        if (!confirm) return;


        event.target.setAttribute("onclick", ""); // remove onclick from svg
        const switchCircle = event.target.querySelector('circle'); // Get the clicked element (the circle)

        console.log(switchCircle)
        isSwitchedOn = switchCircle.getAttribute("value") === "true" ? true : false;
        console.log(isSwitchedOn)
        console.log(event);

        isSwitchedOn = !isSwitchedOn; // Toggle the state
        switchCircle.setAttribute("value", isSwitchedOn);  // set toogled value to circle
        console.log(isSwitchedOn)

        // Adjust the cx attribute and fill color based on the switch state
        switchCircle.setAttribute('cx', isSwitchedOn ? '80' : '20');
        switchCircle.setAttribute('fill', isSwitchedOn ? '#00ff00' : '#ccc');


        fetch("table/present", {
            method: 'Post',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ yValue: switchCircle.getAttribute("axis-y"), doc_id: window.doc_id })

        })
            .then(response => response.json())
            .then(res => {
                message(res.status, res.message);
                console.log(res)
            })
            .catch(err => {
                message(400, "Something happened refresh");
                console.log(err)
            });



    }






    // function getWorker(searchString, ignoreCount, reset) {
    //     // var input = event.target;
    //     // var xValue = input.getAttribute("axis-x");
    //     // var yValue = input.getAttribute("axis-y");
    //     // console.log(xValue, yValue)
    //     // to filter out blank inputs
    //     // var newValue = "";
    //     // if (newValue.trim() === "") {
    //     //     console.log("blank input");
    //     //     return;
    //     // }
    //     // console.log(input)

    //     // adjustCellWidthTargetOnly(input); // Adjust cell widths within the same column (y-axis) as the changed cell

    //     //  post req  using fetch to save data

    //     fetch('/workerprofile/profile', {
    //         method: 'Post',
    //         headers: {
    //             'Content-Type': 'application/json'
    //         },
    //         body: JSON.stringify({ searchString: searchString, ignoreCount: ignoreCount })
    //     })
    //         .then(response => response.json())
    //         .then(resul => {
    //             result = resul.data;
    //             console.log(result);
    //             // const minimizeButton = document.getElementById( 'minimizeButton');
    //             // minimizeButton.click();
    //             // location.reload();

    //             reccomender(result, reset).then(() => {
    //                 window.canRunCode = true          // this will show data a
    //                 if (result.length < resul.should) {
    //                     window.scrollEventListener = false;
    //                 }
    //             })


    //         })
    //         .catch(error => console.error(error));

    // }

    async function getWorker(searchString, ignoreCount, reset) {
        try {
            // Fetch data
            const response = await fetch('/workerprofile/profiles', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ searchString, ignoreCount })
            });

            if (!response.ok) {
                throw new Error('Network response was not ok');
            }

            const resul = await response.json();
            const result = resul.data;
            console.log(result);

            // Call reccomender and wait for it to complete
            await reccomender(result, reset);

            // Set canRunCode and scrollEventListener
            window.canRunCode = true; // this will show data a
            if (result.length < resul.should) {
                window.scrollEventListener = false;
            }
        } catch (error) {
            // Handle errors here
            console.error(error);
        }
    }




    // getting worker list from db and send to table/addwordker
    function reccomender(result, reset) {
        var recommendationsContainer = document.querySelector(".reccomendDivHolder>.reccomendDiv");

        if (reset) {
            recommendationsContainer.innerHTML = "";
        }



        console.log(result.length)
        // var recommendationsContainer = document.createElement("div");
        // recommendationsContainer.setAttribute("class", "reccomendDiv");


        // Create a new box for each user and append it to the container
        for (var x in result) {
            var worker = result[x];

            var box = document.createElement("div");
            box.className = "recommendation-box";
            box.setAttribute("data-worker-id", worker._id);
            // adding event listener to box
            box.addEventListener("click", function (event) {
                console.log(event, event.target, event.target.getAttribute("data-worker-id"));
                worker_id = event.target.getAttribute("data-worker-id");
                // console.log(event.target.querySelector("div.worker-info").querySelector("div.worker-name"));
                worker_name = event.target.querySelector(".worker-info > div.worker-name").textContent;



                fetch('/table/addworker', {
                    method: 'Post',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ doc_id: window.doc_id, worker_id, worker_name })   // also current login user id
                })
                    .then(response => response.json())
                    .then(result => {
                        console.log(result);
                        message(result.status, result.message)
                        if (result.status === 200) {

                            table = result.payload.name;
                            console.log(table)
                            unblur();
                            gridmaker(table, 0)
                        }


                    })
                    .catch(error => console.error(error));


            })



            var image = document.createElement("img");
            image.setAttribute("src", worker.image);

            var userInfo = document.createElement("div");
            userInfo.className = "worker-info";

            var name = document.createElement("div");
            name.className = "worker-name";
            name.textContent = worker.name;

            var age = document.createElement("div");
            age.className = "worker-age";
            age.textContent = worker.Age;

            var father = document.createElement("div");
            father.className = "worker-father";
            father.textContent = "Father: " + worker.FathersName;

            userInfo.appendChild(name);
            userInfo.appendChild(age);
            userInfo.appendChild(father);

            box.appendChild(image);
            box.appendChild(userInfo);

            recommendationsContainer.appendChild(box);
        }
        // document.body.appendChild(recommendationsContainer);



    }


    // nesting overlay GRAM adder, will have to move somewhere else, not everytime they will add any GRAM, send it in Another file as <iframe src="https://www.example.com"></iframe>.
    function onNesta(event) {
        blur()
        smallPageContent = ` <form id="main" action="/main/a">
        <input type="text" name="maina" id="maina" placeholder="enter name of directory you want to create">
        <button type="submit">Upload</button>
    </form>`

        // Display the overlay
        const overlay = document.getElementById('overlay');
        overlay.style.display = 'block';

        // Set the content of the overlay
        overlay.innerHTML = `
        <div class="overlay-content">
            ${smallPageContent}
            </div>
            `;
        // Add a click event listener to the minimize button
        // <-- <button id="minimizeButton">Minimize</button> --!>
        // const minimizeButton = document.getElementById('minimizeButton');
        // minimizeButton.addEventListener('click', () => {
        //     overlay.style.display = 'none'; // Hide the overlay when the button is clicked
        // });

        // Add event listener to the form after it's inserted into the DOM
        const form = document.getElementById('main');
        form.addEventListener('submit', (event) => {
            event.preventDefault();
            const maina = document.getElementById('maina').value;
            console.log(event, maina);

            fetch('/main/a', {
                method: 'Post',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ maina })
            })
                .then(response => response.json())
                .then(result => {
                    message(result.status, result.message)
                    console.log(result);
                    // const minimizeButton = document.getElementById('minimizeButton');
                    // minimizeButton.click();
                    location.reload();

                })
                .catch(error => console.error(error));
        });


    }


    // // get data from  db trigger gridmaker(dataTable)
    function gettable(doc_id, yValue) {
        console.log(doc_id);
        window.doc_id = doc_id;

        fetch('/table/data' + doc_id)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json(); // Parse response body as JSON
            })
            .then(dataTable => {
                // Handle the retrieved data here
                console.log(dataTable);
                // navigator.clipboard.writeText(dataTable)
                gridmaker(dataTable, yValue);

                // createInputCell();  // run itteration thorugh this function with data array   
            })
            .catch(error => {
                // Handle errors here
                console.error('Fetch error:', error);
            });
    }

    //  trigger by clicked on dowm container merged by function onItemClick(event) to execute gettable(doc_id);, 
    function getItem(event) {

        // master

        // // Create a custom event object
        var customEvent = {
            target: {
                checked: false, // Set the checked property as needed
            },
        };
        document.getElementById("masterMyCheckbox").checked = false;
        masterE(customEvent);

        //end Master

        var clickedItem = event.target;
        // marking as clicked and removing from previous one
        elementToRemoveClassFrom = document.querySelector("#wdfk > .clicked");

        if (elementToRemoveClassFrom) {
            elementToRemoveClassFrom.classList.remove("clicked");
        }
        clickedItem.classList.add("clicked");
        //

        var yValue = clickedItem.getAttribute("data-y");
        var doc_id = clickedItem.getAttribute("doc-id");
        // console.log(window.xValue, yValue, doc_id)
        // window.yValue = yValue          // instead save them in cache

        document.getElementById("gridTable").innerHTML = "";   // to clear the table
        gettable(doc_id, yValue);

        document.cookie = "clickedItemDusra=" + yValue + ";";
        const cookies = document.cookie;
        console.log(cookies);



    };



    // after cmweging router a b this below need to changed       //need to rewrite so only doc-id value will be changes not resetting whole conatiner wdfk
    function onItemClick(event) {
        // marking this as clicked and this removing from previous one

        elementToRemoveClassFrom = document.querySelector("#gram-list > .clicked");

        if (elementToRemoveClassFrom) {
            elementToRemoveClassFrom.classList.remove("clicked");
        }

        event.target.classList.add("clicked");




        document.getElementById("gridTable").innerHTML = "";      // to clear the table
        var container = document.getElementById("wdfk");
        container.innerHTML = "";
        console.log(event.target, container)
        var clickedItem = event.target;
        var xValue = clickedItem.getAttribute("data-x");
        // window.xValue = xValue;     // instead save them in cache
        console.log(xValue, window.data)
        // creating b
        for (let n = 0; n < 4; n++) {
            // if (y == 0) continue;
            y = n + 1;
            // console.log("ho raha hai lund mera", window.data[xValue][y]);
            var newItem = document.createElement("div");
            var newP = document.createElement("p");
            newItem.appendChild(newP)

            newItem.className = "item";
            var container = document.getElementById("wdfk");
            container.appendChild(newItem);
            newItem.setAttribute("data-y", n);
            newItem.setAttribute("doc-id", window.data[xValue][y].id);
            newP.textContent = window.data[xValue][y].type;

            newItem.addEventListener("click", getItem);

            // naming them acc to thie position
            // if (y == 1) {
            //     newItem.textContent = "Worker";
            // } else if (y == 2) {
            //     newItem.textContent = "Driver";
            // } else if (y == 3) {
            //     newItem.textContent = "Fitter";
            // } else if (y == 4) {
            //     newItem.textContent = "Kharcha";

            // }
        };

        // setting clicked container as cookie
        document.cookie = "clickedItem=" + xValue + ";";

        // click item from cookie
        const ItemDusraa = checkCookie('clickedItemDusra');
        if (ItemDusraa.status) {
            document.querySelector(`[data-y="${ItemDusraa.value}"]`).click();

        } else {
            console.log('Cookie "Item" does not exist.');
        }

    }

    window.onload = function () {
        // Your JavaScript code here
        console.log("Web page loaded!");
        fetch("/main/data")
            .then(response => {
                if (!response.ok) {
                    throw new Error("Network response was not ok");
                }
                return response.json(); // Parse response body as JSON
            })
            .then(bata => {
                // Handle the retrieved data here
                data = bata.filter(value => value !== false && value !== null);
                // data = [];

                // bata.forEach((value, index) => {
                //     console.log(value, index)
                //     if (value === false || value === null) {
                //         console.log("false")
                //     }
                //     else {

                //         data.push(value);
                //     }
                // });
                window.data = data;
                console.log(data);

                console.log(data.length);
                for (x in data) {
                    var newItem = document.createElement("div");
                    var newP = document.createElement("p");
                    newItem.appendChild(newP);
                    newItem.className = "item";
                    newP.textContent = data[x][0];
                    var container = document.getElementById("gram-list");
                    container.appendChild(newItem);
                    newItem.setAttribute("data-x", x);

                    newItem.addEventListener("click", onItemClick);




                    // for(y in data[x]){
                    //     console.log(x,y,data[x][y] )
                    // }
                }



            })
            .then(() => {
                const Item = checkCookie('clickedItem');
                if (Item.status) {
                    try {
                        document.querySelector(`[data-x="${Item.value}"]`).click();
                    } catch { console.log("something happened while clicking") }
                } else {
                    console.log('Cookie "Item" does not exist.');
                }
            })
            .catch(error => {
                // Handle errors here
                console.error("Fetch error:", error);
            });


    };

    function checkCookie(name) {
        const cookies = document.cookie.split('; ');
        for (const cookie of cookies) {
            const [key, value] = cookie.split('=');
            if (key === name) {
                return { status: true, key: key, value: value }; // Cookie with the specified name exists
            }
        }
        return { status: false }; // Cookie with the specified name does not exist
    }

</script>

</html>